# docker-compose.yml
# Master orchestration file for the Topotrek Data Pipeline.
# This file defines the services for generating the OSM basemap and converting to PMTiles.

# The version '3.8' is a modern, stable version of the Docker Compose file format.
version: "3.8"

# Defines a named volume for persisting the PostgreSQL database data across runs.
# This avoids re-downloading and re-importing the entire database on every run,
# which is crucial for development speed, though for full rebuilds, this volume can be cleared.
volumes:
  pgdata:

# Defines the shared network that allows the services to communicate with each other.
networks:
  postgres_net:
    driver: bridge

# Defines the services that make up the OpenMapTiles pipeline.
services:
  # The PostGIS database service. The core engine of the pipeline.
  postgres:
    image: "${POSTGIS_IMAGE:-openmaptiles/postgis}:${TOOLS_VERSION}"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - postgres_net
    ports:
      # Exposes the PostgreSQL port to the host for potential debugging with a DB client.
      - "${PGPORT:-5432}:5432"
    env_file:.env
    # Renames environment variables to what the PostGIS image expects.
    environment:
      POSTGRES_DB: ${PGDATABASE:-openmaptiles}
      POSTGRES_USER: ${PGUSER:-openmaptiles}
      POSTGRES_PASSWORD: ${PGPASSWORD:-openmaptiles}

  # Service to download OSM data from Geofabrik.
  # It is a short-lived container that runs a script and exits.
  download-geofabrik:
    image: "openmaptiles/import-data:${TOOLS_VERSION}"
    command: download-geofabrik
    env_file:.env
    volumes:
      -./data:/data
    networks:
      - postgres_net

  # Service to import supplementary data (Natural Earth, etc.).
  import-data:
    image: "openmaptiles/import-data:${TOOLS_VERSION}"
    env_file:.env
    networks:
      - postgres_net

  # The main OSM data importer using imposm3.
  import-osm:
    image: "openmaptiles/import-osm:${TOOLS_VERSION}"
    env_file:.env
    volumes:
      -./data:/import
      -./build:/mapping
    depends_on:
      - postgres
    networks:
      - postgres_net

  # Imports multilingual labels from Wikidata.
  import-wikidata:
    image: "openmaptiles/import-wikidata:${TOOLS_VERSION}"
    env_file:.env
    depends_on:
      - postgres
    networks:
      - postgres_net

  # Executes post-import SQL functions and optimizations.
  import-sql:
    image: "openmaptiles/openmaptiles-tools:${TOOLS_VERSION}"
    command: import-sql
    env_file:.env
    volumes:
      -./build:/sql
    depends_on:
      - postgres
    networks:
      - postgres_net

  # The final tile generation service.
  generate-vectortiles:
    image: "openmaptiles/generate-vectortiles:${TOOLS_VERSION}"
    env_file:.env
    volumes:
      -./data:/export
      -./build/openmaptiles.tm2source:/tm2source
    depends_on:
      - postgres
    networks:
      - postgres_net
    environment:
      MBTILES_NAME: ${MBTILES_FILE}
      BBOX: ${BBOX}
      MIN_ZOOM: ${MIN_ZOOM}
      MAX_ZOOM: ${MAX_ZOOM}

  # Utility service to convert the final.mbtiles to.pmtiles.
  pmtiles-converter:
    # Using a specific version of the protomaps/pmtiles image for stability.
    image: "protomaps/pmtiles:1.10.1"
    env_file:.env
    volumes:
      -./data:/data
    # The command constructs the output filename from the input MBTILES_FILE variable.
    command: >
      sh -c '
        INPUT_FILE="/data/${MBTILES_FILE}"
        OUTPUT_FILE="/data/${MBTILES_FILE%.*}.pmtiles"
        if; then
          echo "Converting $$INPUT_FILE to $$OUTPUT_FILE"
          pmtiles convert $$INPUT_FILE $$OUTPUT_FILE
        else
          echo "Error: Input file $$INPUT_FILE not found."
          exit 1
        fi
      '